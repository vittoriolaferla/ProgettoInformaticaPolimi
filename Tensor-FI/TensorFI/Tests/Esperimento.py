from __future__ import print_function

from platform import node
import sys


import numpy as np
from math import floor
import tensorflow as tf
import TensorFI as ti
from TensorFI import faultTypes as ft

node4 = tf.zeros([2,11,5,15])

node5 = tf.zeros([2,11,5,15])

node1 = tf.constant([[
   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

[[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
]]
  , dtype=float)



node2 = tf.constant([[
   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

 [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

[[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
]]
  , dtype=float)



node1.set_shape([1,10,5,19])
node2.set_shape([1,10,5,19])
node3 = tf.add(node1,node2, name = "add1")
list=[]

list=(node1.get_shape().as_list())
arra=np.arange(len(list))
arra=arra.tolist()
tensor=tf.nn.moments(node1,arra,keepdims=True)
x=tf.zeros(node1.get_shape().as_list())
y=tf.zeros(node1.get_shape().as_list())
node3=tf.nn.batch_normalization(node1,x,y,None,None,0.1)
print("Node3 = ", node3)

s = tf.Session()

# Run it first
res1 = s.run([ node3 ])
print("res1 = ", node3)

# Instrument the FI session 
fi = ti.TensorFI(s,configFileName = "confFiles/tests.yaml",name = "logistReg",  logLevel =20 )

# Create a log for visualizng in TensorBoard
logs_path = "./logs"
logWriter = tf.summary.FileWriter( logs_path, s.graph )

# Run it again with fault injection enabled
res2=s.run(node3)

print("res2 = ", node3)